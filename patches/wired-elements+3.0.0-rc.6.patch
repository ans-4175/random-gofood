diff --git a/node_modules/wired-elements/lib/wired-item.d.ts b/node_modules/wired-elements/lib/wired-item.d.ts
index b2ee940..c6d4465 100644
--- a/node_modules/wired-elements/lib/wired-item.d.ts
+++ b/node_modules/wired-elements/lib/wired-item.d.ts
@@ -3,6 +3,7 @@ import { TemplateResult, CSSResultArray } from 'lit';
 export declare class WiredItem extends WiredBase {
     value: string;
     name: string;
+    disabled: boolean;
     selected: boolean;
     static get styles(): CSSResultArray;
     render(): TemplateResult;
diff --git a/node_modules/wired-elements/lib/wired-item.js b/node_modules/wired-elements/lib/wired-item.js
index e9c5d3c..a07b161 100644
--- a/node_modules/wired-elements/lib/wired-item.js
+++ b/node_modules/wired-elements/lib/wired-item.js
@@ -16,6 +16,7 @@ let WiredItem = class WiredItem extends WiredBase {
         super(...arguments);
         this.value = '';
         this.name = '';
+        this.disabled = false;
         this.selected = false;
     }
     static get styles() {
@@ -69,6 +70,12 @@ let WiredItem = class WiredItem extends WiredBase {
       button:active span {
         transform: scale(1.02);
       }
+      button[disabled] {
+        opacity: 0.6 !important;
+        background: rgba(0, 0, 0, 0.07);
+        cursor: default;
+        pointer-events: none;
+      }
       #overlay {
         display: none;
       }
@@ -91,7 +98,7 @@ let WiredItem = class WiredItem extends WiredBase {
     }
     render() {
         return html `
-    <button class="${this.selected ? 'selected' : ''}">
+    <button class="${this.selected ? 'selected' : ''}" ?disabled="${this.disabled}">
       <div id="overlay"><svg></svg></div>
       <span><slot></slot></span>
     </button>`;
@@ -122,6 +129,10 @@ __decorate([
     property({ type: Boolean }),
     __metadata("design:type", Object)
 ], WiredItem.prototype, "selected", void 0);
+__decorate([
+    property({ type: Boolean }),
+    __metadata("design:type", Object)
+], WiredItem.prototype, "disabled", void 0);
 WiredItem = __decorate([
     customElement('wired-item')
 ], WiredItem);
diff --git a/node_modules/wired-elements/lib/wired-lib.js b/node_modules/wired-elements/lib/wired-lib.js
index 5b1d153..9d3ec39 100644
--- a/node_modules/wired-elements/lib/wired-lib.js
+++ b/node_modules/wired-elements/lib/wired-lib.js
@@ -90,7 +90,7 @@ export function ellipse(parent, x, y, width, height, seed) {
 }
 export function hachureFill(points, seed) {
     const hf = new ZigZagFiller(fillHelper);
-    const ops = hf.fillPolygon(points, options(seed));
+    const ops = hf.fillPolygons([points], options(seed));
     return createPathNode(ops, null);
 }
 export function hachureEllipseFill(cx, cy, width, height, seed) {
diff --git a/node_modules/wired-elements/lib/wired-tab.d.ts b/node_modules/wired-elements/lib/wired-tab.d.ts
index 0ba5fe7..45270d9 100644
--- a/node_modules/wired-elements/lib/wired-tab.d.ts
+++ b/node_modules/wired-elements/lib/wired-tab.d.ts
@@ -4,6 +4,8 @@ import './wired-item.js';
 export declare class WiredTab extends WiredBase {
     name: string;
     label: string;
+    disabled?: boolean;
+    hasBorder?: boolean;
     private resizeObserver?;
     private windowResizeHandler?;
     constructor();
diff --git a/node_modules/wired-elements/lib/wired-tab.js b/node_modules/wired-elements/lib/wired-tab.js
index 505dc90..ac69e4d 100644
--- a/node_modules/wired-elements/lib/wired-tab.js
+++ b/node_modules/wired-elements/lib/wired-tab.js
@@ -17,6 +17,8 @@ let WiredTab = class WiredTab extends WiredBase {
         super();
         this.name = '';
         this.label = '';
+        this.disabled = false;
+        this.hasBorder = true;
         if (window.ResizeObserver) {
             this.resizeObserver = new window.ResizeObserver(() => {
                 if (this.svg) {
@@ -74,7 +76,9 @@ let WiredTab = class WiredTab extends WiredBase {
         return [s.width, s.height];
     }
     draw(svg, s) {
-        rectangle(svg, 2, 2, s[0] - 4, s[1] - 4, this.seed);
+        if (this.hasBorder) {
+            rectangle(svg, 2, 2, s[0] - 4, s[1] - 4, this.seed);
+        }
     }
 };
 __decorate([
@@ -85,6 +89,14 @@ __decorate([
     property({ type: String }),
     __metadata("design:type", Object)
 ], WiredTab.prototype, "label", void 0);
+__decorate([
+    property({ type: Boolean }),
+    __metadata("design:type", Object)
+], WiredTab.prototype, "hasBorder", void 0);
+__decorate([
+    property({ type: Boolean }),
+    __metadata("design:type", Object)
+], WiredTab.prototype, "disabled", void 0);
 WiredTab = __decorate([
     customElement('wired-tab'),
     __metadata("design:paramtypes", [])
diff --git a/node_modules/wired-elements/lib/wired-tabs.d.ts b/node_modules/wired-elements/lib/wired-tabs.d.ts
index cb2b68f..138f4a5 100644
--- a/node_modules/wired-elements/lib/wired-tabs.d.ts
+++ b/node_modules/wired-elements/lib/wired-tabs.d.ts
@@ -1,6 +1,7 @@
 import { TemplateResult, CSSResultArray, LitElement } from 'lit';
 export declare class WiredTabs extends LitElement {
     selected?: string;
+    alignment?: string;
     private slotElement?;
     private pages;
     private pageMap;
diff --git a/node_modules/wired-elements/lib/wired-tabs.js b/node_modules/wired-elements/lib/wired-tabs.js
index f9dfb28..dbbf9f8 100644
--- a/node_modules/wired-elements/lib/wired-tabs.js
+++ b/node_modules/wired-elements/lib/wired-tabs.js
@@ -7,14 +7,17 @@ var __decorate = (this && this.__decorate) || function (decorators, target, key,
 var __metadata = (this && this.__metadata) || function (k, v) {
     if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
 };
-import { BaseCSS } from './wired-base';
+import { fireEvent, BaseCSS } from './wired-base';
 import { css, html, LitElement } from 'lit';
 import { customElement, property, query } from 'lit/decorators.js';
+import { classMap } from 'lit-html/directives/class-map';
+
 let WiredTabs = class WiredTabs extends LitElement {
     constructor() {
         super(...arguments);
         this.pages = [];
         this.pageMap = new Map();
+        this.alignment = 'left';
     }
     static get styles() {
         return [
@@ -39,15 +42,32 @@ let WiredTabs = class WiredTabs extends LitElement {
           -webkit-flex-direction: row;
           flex-direction: row;
         }
+
+        .left {
+          justify-content: flex-start;
+        }
+        .center {
+          justify-content: center;
+        }
+        .right {
+          justify-content: flex-end;
+        }
       `
         ];
     }
+    onTabClick(page) {
+        if (page.__disabled) {
+            return;
+        }
+
+        this.selected = page.name
+    }
     render() {
         return html `
-    <div id="bar">
+    <div id="bar" class=${classMap({ [this.alignment]: true })}>
       ${this.pages.map((p) => html `
-      <wired-item role="tab" .value="${p.name}" .selected="${p.name === this.selected}" ?aria-selected="${p.name === this.selected}"
-        @click="${() => this.selected = p.name}">${p.label || p.name}</wired-item>
+      <wired-item role="tab" .disabled="${p.__disabled}" .value="${p.name}" .selected="${p.name === this.selected}" ?aria-selected="${p.name === this.selected}"
+        @click="${() => this.onTabClick(p)}">${p.label || p.name}</wired-item>
       `)}
     </div>
     <div>
@@ -66,7 +86,10 @@ let WiredTabs = class WiredTabs extends LitElement {
                     if (n.nodeType === Node.ELEMENT_NODE && n.tagName.toLowerCase() === 'wired-tab') {
                         const e = n;
                         this.pages.push(e);
-                        const name = e.getAttribute('name') || '';
+                        // PATCHNOTE(imballinst): I don't know what's going on, but
+                        // there is no `name` attribute, nor is `__name` (in the DOM),
+                        // but we can access `__name` directly.
+                        const name = e.__name || '';
                         if (name) {
                             name.trim().split(' ').forEach((nameSegment) => {
                                 if (nameSegment) {
@@ -105,6 +128,11 @@ let WiredTabs = class WiredTabs extends LitElement {
     }
     updated() {
         const newPage = this.getElement();
+        
+        if (newPage.__disabled) {
+            return;
+        }
+
         for (let i = 0; i < this.pages.length; i++) {
             const p = this.pages[i];
             if (p === newPage) {
@@ -148,7 +176,13 @@ let WiredTabs = class WiredTabs extends LitElement {
             else {
                 index--;
             }
+            
+            if (list[index].__disabled) {
+                return;
+            }
+
             this.selected = list[index].name || '';
+            this.fireSelected();
         }
     }
     selectNext() {
@@ -170,14 +204,27 @@ let WiredTabs = class WiredTabs extends LitElement {
             else {
                 index++;
             }
+            
+            if (list[index].__disabled) {
+                return;
+            }
+
             this.selected = list[index].name || '';
+            this.fireSelected();
         }
     }
+    fireSelected() {
+        fireEvent(this, 'selected', { selected: this.selected });
+    }
 };
 __decorate([
     property({ type: String }),
     __metadata("design:type", String)
 ], WiredTabs.prototype, "selected", void 0);
+__decorate([
+    property({ type: String }),
+    __metadata("design:type", String)
+], WiredTabs.prototype, "alignment", void 0);
 __decorate([
     query('slot'),
     __metadata("design:type", HTMLSlotElement)
